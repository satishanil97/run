alias i S0;
alias physicalSP S1;
alias sysCallNo S2;
alias counter S3;
alias PID S4;
alias newPCB S5;

physicalSP = [PTBR + 2*(SP/512)]*512 + (SP%512);
sysCallNo = [physicalSP -1];

if(sysCallNo == 10) then						//Exit

	counter = 0;
	PID = (PTBR - 1024)/8;


	while(counter < 32) do
		if([READY_LIST + 32*counter + 1] == (100 + PID)) then		//Signal waiting processes
			[READY_LIST + 32*counter + 1] = 1;
		endif;

		counter = counter + 1;
	endwhile;

	counter = 0;
	while(counter<32) do									//find next ready process
		if([READY_LIST + 32*counter + 1] == 1) then
			break;
		endif;
		counter = counter + 1;
	endwhile;

	if(counter == 32) then							//if no more processes to run -> halt
		halt;
	endif;

	counter = 0;
	i = READY_LIST + 32*PID + 15;
	while(counter < 8) do										//decrement system wide open file table
		if([i + 2*counter] != -1) then
			[FILE_TABLE + 2*[i + 2*counter] + 1] = [FILE_TABLE + 2*[i+2*counter] + 1] - 1;
			if([FILE_TABLE + 2*[i + 2*counter] + 1] == 0) then
				[FILE_TABLE + 2*[i+ 2*counter]] = -1;
			endif;
		endif;
		[i + 2*counter] = -1;
		[i + 2*counter + 1] = -1;
		counter = counter + 1;
	endwhile;

	[READY_LIST + 32*PID + 1] = 0;

	counter = 0;
	while(counter < 4) do							//free pages and disk blocks
		if([PTBR + 2*counter + 1]=="01" || [PTBR + 2*counter + 1]=="11") then
			[1280 + [PTBR + 2*counter]] = [1280 + [PTBR + 2*counter]] - 1;
		endif;
		if([PTBR + 2*counter + 1]=="00" || [PTBR + 2*counter + 1]=="10") then
			if([PTBR + 2*counter]>=448) then
				[6*512 + [PTBR + 2*counter]] = [6*512 + [PTBR + 2*counter]] - 1;
			endif;
		endif;
		[PTBR + 2*counter] = -1;
		[PTBR + 2*counter + 1] = "00";
		counter = counter + 1;
	endwhile;

	store(6,20);

	breakpoint;
	PID = (PTBR - 1024)/8;
	counter = (PID + 1)%32;
	while(counter !=PID) do											//finding next ready process
		if([READY_LIST + 32*counter + 1]==1) then
			break;
		endif;
		counter = (counter + 1)%32;
	endwhile;

	newPCB = counter;										//setting up next process
	i = READY_LIST + 32*newPCB;
	BP = [i + 2];
	SP = [i + 3];
	PTBR = [i + 5];
	PTLR = [i + 6];
	R0 = [i + 7];
	R1 = [i + 8];
	R2 = [i + 9];
	R3 = [i + 10];
	R4 = [i + 11];
	R5 = [i + 12];
	R6 = [i + 13];
	R7 = [i + 14];

	SP = SP + 1;
	physicalSP = [PTBR + 2*(SP/512)]*512 + (SP%512);
	[physicalSP] = [i + 4];										//putting IP on top of stack
	[i + 1] = 2;
	breakpoint;
	ireturn;
endif;

if(sysCallNo == 13) then						//Wait
	alias waitPid S6;
	alias pid S7;

	waitPid = [physicalSP - 3];

	if(([READY_LIST + waitPid*32 + 1] == 2) || ([READY_LIST + waitPid*32 + 1] == 0)) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	pid = (PTBR - 1024)/8;

	[READY_LIST + pid*32 + 1] = 100 + waitPid;

	[physicalSP - 2] = 0;

	inline "JMP 4608";			//timer
	ireturn;
endif;

if(sysCallNo == 14) then		//Signal
	alias pid S8;
	alias counter S9;

	pid = (PTBR- 1024)/8;
	counter = 0;
	breakpoint;

	while(counter < 32) do
		if([READY_LIST + 32*counter + 1] == (100 + pid)) then
			[READY_LIST + 32*counter + 1] = 1;
		endif;

		counter = counter + 1;
	endwhile;

	[physicalSP - 2] = 0;
	breakpoint;
	ireturn;
endif;

ireturn;
